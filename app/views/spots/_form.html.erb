<style>
  #newSpotMap{
    width: 100%;
    height: 400px;
  }
</style>

<script>
function initMap() {
  if( navigator.geolocation ){
    navigator.geolocation.getCurrentPosition( success, error, option );
    function success(position){
      var data = position.coords;
      var lat = data.latitude;
      var lng = data.longitude;
      
      var map;
      var marker = [];
      var infoWindow = [];
      var currentLatLng = {
        lat: lat,
        lng: lng
      };

      document.getElementById('spot_latitude').value = lat;
      document.getElementById('spot_longitude').value = lng;
      
      map = new google.maps.Map(document.getElementById('newSpotMap'), {
        center: currentLatLng, // 地図の中心を指定
        zoom: 18, // 地図のズームを指定
        gestureHandling: "cooperative"
      });
      
      //現在位置の処理
      markerCurrentLatLng = new google.maps.LatLng({lat: Number(lat), lng: Number(lng)});
      makerCurrent = new google.maps.Marker({
        position: markerCurrentLatLng,
        map: map
      });
      makerCurrent.setOptions({
        icon: {
          url: "<%= asset_url 'focus.png' %>"
        }
      });
      
      // マップが表示された際
      map.addListener('projection_changed', function() {
       console.log('projection_changed');
       var geocoder = new google.maps.Geocoder();
        geocoder.geocode({
          latLng: currentLatLng
        },function(results, status) {
          getGeocodeAddValueToField(results);
        });
      });

      // マップをクリックした際
      map.addListener('click', function(e) {
        getClickLatLng(e.latLng, map);
      });
      function getClickLatLng(lat_lng, map) {
        document.getElementById('spot_latitude').value=lat_lng.lat();
        document.getElementById('spot_longitude').value=lat_lng.lng();
        
        console.log(lat_lng);
        
        makerCurrent.setMap(null);
        makerCurrent = new google.maps.Marker({
          position: lat_lng,
          map: map
        });
        makerCurrent.setOptions({
          icon: {
            url: "<%= asset_url 'focus.png' %>"
          }
        });
        map.panTo(lat_lng);
        
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({
          latLng: lat_lng
        },function(results, status) {
          getGeocodeAddValueToField(results);
        });
        
      }
      
      // 検索フィールドの処理
      $(document).on('click', '#btn', function(){
        var text = '';
        text = $('#searchField').val();
        var geocoder = new google.maps.Geocoder();
          geocoder.geocode({
            address: text
          }, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
              var latlng = results[0].geometry.location
              var address = results[0].formatted_address;
              makerCurrent.setMap(null);
              makerCurrent = new google.maps.Marker({
                position: latlng,
                map: map
              });
              makerCurrent.setOptions({
                icon: {
                  url: "<%= asset_url 'focus.png' %>"
                }
              });
              map.panTo(latlng);
              getGeocodeAddValueToField(results);

            } else if (status == google.maps.GeocoderStatus.ERROR) {
              alert("サーバとの通信時に何らかのエラーが発生！");
            } else if (status == google.maps.GeocoderStatus.INVALID_REQUEST) {
              alert("リクエストに問題アリ！geocode()に渡すGeocoderRequestを確認せよ！！");
            } else if (status == google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {
              alert("短時間にクエリを送りすぎ！落ち着いて！！");
            } else if (status == google.maps.GeocoderStatus.REQUEST_DENIED) {
              alert("このページではジオコーダの利用が許可されていない！・・・なぜ！？");
            } else if (status == google.maps.GeocoderStatus.UNKNOWN_ERROR) {
              alert("サーバ側でなんらかのトラブルが発生した模様。再挑戦されたし。");
            } else if (status == google.maps.GeocoderStatus.ZERO_RESULTS) {
              alert("見つかりません");
            } else {
              alert("えぇ～っと・・、バージョンアップ？");
            }
          });
      });
      
    }//success
    function error(error){
      var errorMessage = {
        0: "原因不明のエラーが発生しました。",
        1: "位置情報が許可されませんでした。",
        2: "位置情報が取得できませんでした。",
        3: "タイムアウトしました。",
      } ;
      alert( errorMessage[error.code]);
    }//error
    var option = {
      "enableHighAccuracy": false,
      "timeout": 1000 ,
      "maximumAge": 100 ,
    };
  
  }else{
    alert("あなたの端末では、現在位置を取得できません。");
  }
  
}

function getGeocodeAddValueToField(array){
  console.log(array);
  if (array[0].geometry) {
    var name = array[0]['address_components'][0]['long_name']
    if(name.match(/^([−]?[0-9０-９])*$/)){
      document.getElementById('nameField').value='';
    }else{
      document.getElementById('nameField').value=name;
    }
    var address = array[0].formatted_address
    document.getElementById('addressField').value=address;
    var postalCode = '';
    if ( address.match(/\d{3}-\d{4}/g)) {
      postalCode = String(address.match(/\d{3}-\d{4}/g));
      document.getElementById('zipField').value=postalCode;
    }
  }
}





</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?v=3.exp&key=<%= ENV['GEOCODING_API_KEY'] %>&callback=initMap"></script>

<%= text_field :keywords, :keyword, {placeholder: params[:keyword], class: 'form-control', id: 'searchField'} %>

<div id="btn">fire</div>


<div id="newSpotMap" class="mb-5"></div>

<%= form_for(@spot) do |f| %>
  <%= render 'shared/error_messages', object: f.object %>
  
  <div class="form-group">
    <%= f.label :name, 'スポット名' %>
    <%= f.text_field :name, class: 'form-control', id: 'nameField' %>
  </div>
  
  <div class="form-group">
    <%= f.label :image, '画像' %>
    <%= spot_thumb(@spot, 'd-block mb-3') %>
    <%= f.file_field :image %>
  </div>

  <div class="form-group">
    <%= f.label :latitude, '緯度' %>
    <%= f.text_field :latitude, class: 'form-control' %>
  </div>
  
  <div class="form-group">
    <%= f.label :longitude, '経度' %>
    <%= f.text_field :longitude, class: 'form-control' %>
  </div>
  
  <div class="form-group">
    <%= f.label :zipcode, '郵便番号' %>
    <%= f.text_field :zipcode, class: 'form-control', id: 'zipField' %>
  </div>
  
  <div class="form-group">
    <%= f.text_field :address, class: 'form-control', id: 'addressField' %>
  </div>

  <div class="form-group">
    <%= f.label :category_ids, 'カテゴリー', class: 'cat-label d-block' %>
    <%= f.collection_check_boxes(:category_ids, Category.all, :id, :name) do |b| %>
      <div class="form-check form-check-inline">
        <%= b.label { b.check_box + b.text } %>
      </div>
    <% end %>
  </div>
  
  <div class="form-group">
    <%= f.label :overview, 'おすすめポイント' %>
    <%= f.text_area :overview, size: '20x10', maxlength: '2000', class: 'form-control' %>
  </div>
  
  <%= f.submit '登録する', class: 'btn btn-primary btn-block' %>
  
<% end %>